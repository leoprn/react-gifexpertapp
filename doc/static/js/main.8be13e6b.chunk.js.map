{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inFiltro","setInFiltro","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifs","Categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","categoria","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categorias","console","log","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGZC,mBAAS,IAHG,mBAGrCC,EAHqC,KAG3BC,EAH2B,KA0B5C,OACI,0BAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAECJ,EAASK,OAAOC,OAAO,IACtBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAiBO,OACnCN,EAAY,OASZ,2BACAO,KAAK,OAAOC,MAAOT,EACnBU,SAzBkB,SAACP,GAIvBF,EAAYE,EAAEQ,OAAOF,QAsBjBG,YAAY,0B,uBCjCPC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,mGAEsFC,UAAUH,IAFhG,SAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAIDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAgBZM,GAhBY,4CAAH,sDCEXO,EAAc,SAAC,GAAW,IAAVL,EAAS,EAATA,IAEzB,OACI,yBAAMM,UAAY,yCACd,yBAAKC,IAAKP,EAAIR,IAAKgB,IAAKR,EAAIE,QAC5B,2BAAIF,EAAIE,SCFPO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAAe,ECFZ,SAACoB,GAAe,IAAD,EAGbnC,mBAAS,CAC/BsB,KAAM,GACNc,SAAS,IAL0B,mBAGhCC,EAHgC,KAGzBC,EAHyB,KAsBvC,OAdAC,qBAAU,WACNzB,EAAQqB,GACHK,MAAK,SAAAjB,GAEFe,EAAS,CACLhB,KAAMC,EACNa,SAAS,SAGtB,CAACD,IAKGE,EDjBwBI,CAAa1B,GAAhCa,EAHwB,EAG7BN,KAAac,EAHgB,EAGhBA,QAEpB,OAEI,yBAAKL,UAAU,WACX,wBAAIA,UAAU,UAAUhB,GAExB,yBAAKgB,UAAU,UACVK,EAAU,cAAgB,IAG9B,4BACO,yBAAML,UAAY,0CAEdH,EAAOJ,KAAI,SAAAC,GAAG,OAEV,kBAAC,EAAD,CAAaiB,IAAKjB,EAAIC,GAAID,IAAMA,WErB/CkB,EAAe,WAAM,MAGM3C,mBAAS,IAHf,mBAGvB4C,EAHuB,KAGX7C,EAHW,KAQ9B,OAFA8C,QAAQC,IAAIF,GAGR,oCACI,4CACA,kBAAC,EAAD,CAAa7C,cAAiBA,IAE9B,4BAEI6C,EAAWpB,KAAI,SAAAW,GAAS,OACpB,kBAAC,EAAD,CACAO,IAAMP,EACNpB,UAAWoB,U,MCjB/BY,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.8be13e6b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\n\r\n\r\n    const [inFiltro, setInFiltro] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n\r\n        //Detectar cuando sea el enter\r\n\r\n        setInFiltro(e.target.value);\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n\r\n        e.preventDefault();//Esto evita el comportamiento por defecto del form  () envie y refresque la pagina)\r\n\r\n        if(inFiltro.trim().length>2){\r\n            setCategorias(cats => [inFiltro,...cats]);\r\n            setInFiltro('');\r\n        }\r\n\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type=\"text\" value={inFiltro} \r\n            onChange={ handleInputChange }\r\n            placeholder=\"Ingresa tu busqueda\"\r\n            />\r\n        </form>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n    //Defino que la propiedad de la funcion setCategoria debe ser obligatoria    \r\n    AddCategory.propTypes = {\r\n\r\n        setCategorias: PropTypes.func.isRequired\r\n\r\n    }\r\n","\r\n    export const getGifs = async (Categoria) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=rhCjDprdZRIVb9rJLGRHLVB3bQKvRyf9&limit=10&q=${ encodeURI(Categoria)}`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n       \r\n        //Filtro los datos que me interesan de la data\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({img}) => {\r\n\r\n    return (\r\n        < div className = 'gif animate__animated animate__fadeIn' >\r\n            <img src={img.url} alt={img.title}></img>\r\n            <p>{img.title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//Defino que la propiedad de la funcion setCategoria debe ser obligatoria    \r\nGifGridItem.propTypes = {\r\n\r\n    img: PropTypes.func.isRequired\r\n\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ({Categoria}) => {\r\n\r\n\r\n    const {data:images, loading} = useFetchGifs(Categoria);\r\n    \r\n    return (\r\n        \r\n        <div className='divgrid'>\r\n            <h2 className='titulo'>{Categoria}</h2>\r\n            \r\n            <div className='titulo'>\r\n                {loading ? 'Cargando...' : ''}\r\n            </div>\r\n\r\n             <ol>\r\n                    < div className = 'grid animate__animated animate__fadeIn' >\r\n                    {                     \r\n                        images.map(img => (\r\n                            \r\n                            <GifGridItem key={img.id} img= {img }/>\r\n                        ))                        \r\n                    }\r\n                    </div>\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n//Este Hooks va a controlar el loading para dibujar cuando se este cargando imagen o no\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n            .then(gifs => {\r\n\r\n                setState({\r\n                    data: gifs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [categoria])\r\n   \r\n\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //Para cambiar valores de variables y que React renderize\r\n    const [categorias, setCategorias] = useState([]);\r\n    \r\n\r\n    console.log(categorias);\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategorias = {setCategorias}/>\r\n\r\n            <ol>\r\n            {\r\n                categorias.map(categoria => (\r\n                    <GifGrid  \r\n                    key={ categoria } \r\n                    Categoria={categoria} \r\n                    />\r\n                ))\r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\n  <GifExpertApp />,\n  document.getElementById('root')\n  );\n\n\n"],"sourceRoot":""}